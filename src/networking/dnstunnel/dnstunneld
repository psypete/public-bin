#!/usr/bin/perl

$|=1;
use strict;

my $VERSION = "2011-03-13";

use Fcntl;
use Net::DNS;
use Net::DNS::Nameserver;
use LWP::UserAgent;
use Time::HiRes qw ( usleep gettimeofday );
use MIME::Base64;
use MIME::Base32 qw ( RFC );
use IO::Socket;
use Class::Struct;
use Getopt::Long;
use English;
use POSIX qw(setsid);
#use vars qw(%opts);

no threads;

my %opts;
my %mods;
my %socklist;
my %sockdata;

# parse options
$opts{ptrname}  = "127.0.0.1";
$opts{forward}  = "sshdns:127.0.0.1:22";
#$opts{forward}  = "sshdns:127.0.0.1:5659";
$opts{listen}   = "0.0.0.0";
$opts{verbose}  = 0;
$opts{user}     = 'nobody';
$opts{group}    = 'nobody';
$opts{daemon}   = 0;

GetOptions(
        "ip=s"      =>  \$opts{ip},
        "ptrname=s" =>  \$opts{ptrname},
        "forward=s" =>  \$opts{forward},
        "listen=s"  =>  \$opts{listen},
        "verbose"   =>  \$opts{verbose},
        "user=s"    =>  \$opts{user},
        "group=s"   =>  \$opts{group},
        "daemon"  =>  \$opts{daemon},
        "pidfile=s" =>  \$opts{pidfile}
);
if ($ARGV[0]) {
        $opts{localname} = $ARGV[0];
        my @tmp = split(/\./, $opts{localname});
        $opts{nameoffset} = $#tmp;
        undef @tmp;
}
my ($servname, $remotehost, $remoteport) = split(":", $opts{forward});

# check minimum option or print usage
if ( !length($opts{localname}) || !length($opts{ip}) ) {
        print STDERR << "EOD";
dnstunneld $VERSION - DNS tunnel server
written by Dan Kaminsky <dan\@doxpara.com>
modified by Andreas Gohr <andi\@splitbrain.org>
         and Peter Willis <peterwwillis\@yahoo.com>

Usage:  dnstunneld <OPTIONS> server.example.com
Options:
    -v                   Verbose mode
    -l [ip address]      Device to listen on (defaults to 0.0.0.0)
    -i [ip address]      IP address to return for all A requests (required)
    -p [name]            Name/IP to return for reverse lookups[ptr]
    -f [name:host:port]  Forward function to address, port
                         (Default:  sshdns:127.0.0.1:22)
    -u [user]            drop privileges to this user
    -g [group]           drop privileges to this group
    -d                   Daemonize (go to background)
    --pidfile FILE       Write pid to FILE
EOD
        exit 1;
}

select STDOUT;
$|=1;

my %dns_sock_h = ( 'sock' => '$', 'lasttime' => '$', 'reader' => '$', 'queue' => '$', 'portfwd' => '$' );
struct ( dns_sock => \%dns_sock_h );

my %dns_sock_data_h = ( 'data' => '$', 'lasttime' => '$' );
struct ( dns_sock_data => \%dns_sock_data_h );

# set STDIN to nonblock
# .... why are we doing this? we don't take any input on stdin.
my $flags='';
fcntl(STDIN, F_GETFL, $flags) or die "1\n";
$flags |= O_NONBLOCK;
fcntl(STDIN, F_SETFL, $flags) or die "2\n";

my $dataclean;
my $sockclean;
#my $read_chunk_size = 110;
my $read_chunk_size = 220;

use Scalar::Util qw(reftype refaddr blessed);


### Internal Functions ###

sub reader {
    my $sock = $_[0];
    my $queue= $_[1];
    my $data;

    #while (1) {
        if ($queue->pending < 32) {
            #print "Pending: ??\n";
            if ( ! can_recv($sock) ) {
                #print STDERR "Error: cannot read from sock yet\n";
                return;
            }
            my $r = sysread($sock, $data, $read_chunk_size);
            #print "data: $data r: $r\n";
            if (length($data)) {
                $queue->enqueue($data);
            }
            usleep (50 * 1000 / 10);
        }
    #}
}

sub handle_dns_tunneling {
        my $self = shift;
        my @args = @{$self->{args}};
        my $op     = $args[0];
        my $id     = $args[1];
        my ($offset, $nonce) = split("-", $args[2]);

        my $now = gettimeofday();
        if(!$sockclean || $now - $sockclean > 240){
            $sockclean = gettimeofday();
            foreach my $scanid (keys %socklist){
                #eval {
                    if ( $now - $socklist{$scanid}->lasttime > 10){
                        $socklist{$scanid}->sock->shutdown(2);
                        delete $socklist{$scanid};
                    }
                #};
            }
        }

        if (!$dataclean || $now - $dataclean > 20) {
            $dataclean = gettimeofday();
            foreach my $scanid (keys %sockdata) {
                #eval {
                    if ( defined($sockdata{$scanid}) && ($now - $sockdata{$scanid}->lasttime > 60) ) {
                        delete $sockdata{$scanid};
                    }
                #};
            }
        }

        if (!exists $socklist{$id}) {
            $socklist{$id} = new dns_sock;

            $socklist{$id}->queue( Queue->new );

            #$socklist{$id}->portfwd( PortForward->new( peeraddr => "$remotehost:$remoteport" ) );
            #$socklist{$id}->portfwd->start_connect;
            
            my $c = IO::Socket::INET->new(PeerAddr => "$remotehost:$remoteport", Proto => 'tcp', Blocking => 1, Timeout => 10) || die "Error: could not connect to tunnel: $!";

            $socklist{$id}->sock( $c );

            #reader( $socklist{$id}->sock, $socklist{$id}->queue );
        }

        # reads data from the tunneled socket, enqueues it
        reader( $socklist{$id}->sock, $socklist{$id}->queue );

        $socklist{$id}->lasttime($now);
        my $sock = $socklist{$id}->sock;

        my $sockdata_is_fresh=0;
        if (!exists $sockdata{$op,$offset,$id}) {
            $sockdata{$op,$offset,$id} = new dns_sock_data;
            $sockdata{$op,$offset,$id}->lasttime($now);
            $sockdata_is_fresh=1;
        }

        #print STDERR "op: $op qtype: $self->{qtype}\n";

        my $data = $sockdata{$op,$offset,$id}->data;
        if ($op eq "up" && $self->{qtype} eq "A") {
            my $size=0;
            $data = uc join("", reverse(@args[3..$#args]));
            $data = MIME::Base32::decode($data);
            #print "decoded as: \"$data\"\n";

            if ($sockdata_is_fresh) {
                while($size != length($data)) {
                    my $outdata;
                    $outdata = substr($data, $size);
                    eval {
                        if ( !  getpeername($sock) and $sock->connected ) {
                            print STDERR "Error: sock no longer connected\n";
                            return;
                        }
                        if ( ! can_send($sock) ) {
                            print STDERR "Error: can not write yet\n";
                            return;
                        }
                        $size += syswrite($sock, $outdata, length($data)-$size);
                    };
                    if ($size != length($data)) {
                        usleep (100 * 1000);
                    }
                }
                $data="1"; #for now, we don't store incoming data
            }

            $sockdata{$op,$offset,$id}->data($data);

            my $reply = "$size.0.0.0";
            my $ttl  = 0;
            push @{$self->{ans}}, Net::DNS::RR->new("$self->{qname} $ttl $self->{qclass} A $reply");
            $self->{rcode} = "NOERROR";

            #goto end;
            return;

        } elsif ($op eq "down") { #intentionally not txt checking
            if ( $sockdata_is_fresh || length($data)==0 ) {
                #$data = $socklist{$id}->queue->dequeue_nb;
                $data = $socklist{$id}->queue->dequeue;
            }
            $sockdata{$op,$offset,$id}->data($data);

            my $foo = encode_base64($data, "");

            # note: the trailing space must be there or Net::DNS doubles the size of the last entry
            # also, this must be 60; 110 causes packet corruption for reasons i don't fully understand yet
            $foo =~ s/(.{60})/"$1" /g;

            my $x    = $socklist{$id}->queue->pending;
            #print STDERR "down: sending '$data'\n";
            
            $self->{rcode} = "NOERROR";
            my $ttl = 0; # this wasn't exactly part of the original

            ##push @{$self->{ans}}, Net::DNS::RR->new("$self->{qname} $self->{ttl} $self->{qclass} $self->{qtype} \"$txt1\" \"$txt2\"");

            my $thing = "$self->{qname} $ttl $self->{qclass} $self->{qtype} $foo";

            push @{$self->{ans}}, Net::DNS::RR->new($thing);
            push @{$self->{add}}, Net::DNS::RR->new("pending.$self->{qname} $ttl $self->{qclass} A $x.0.0.0");
            #$self->{rcode} = "NOERROR";
            #goto end;

            return;
        }
}

sub reply_handler {
    my $self;
    my ($qname, $qclass, $qtype, $peerhost, $header, $packet) = @_;
    my ($rcode, @ans, @auth, @add, $val);

    my @namelist = split(/\./, $qname);
    my @reverselist = reverse(@namelist);
    my $function = $reverselist[$opts{nameoffset}+1];
    my @args = (@reverselist[$opts{nameoffset}+2..$#reverselist]);

    $self->{args} = \@args;
    $self->{qtype} = $qtype;
    $self->{ans} = \@ans;
    $self->{qclass} = $qclass;
    $self->{add} = \@add;
    $self->{qname} = $qname;

    $rcode = "NXDOMAIN";

    $self->{rcode} = \$rcode;

    #print STDERR "reply handling: qtype $qtype function $function servname $servname\n";

    if ($qtype eq "AAAA") {
        $rcode = "NOTIMPL";
        #goto end;

    } elsif ($qtype eq "SOA") {
        my $now = gettimeofday(); # yeah that'll give unique serials
        my $name = $opts{localname};
        ($self->{ttl}, my $rdata) = (3600, "ns.$name root.$name $now 28800 14400 3600000 0");
        push @ans, Net::DNS::RR->new("$qname $self->{ttl} $qclass $qtype $rdata");
        $rcode = "NOERROR";
        #goto end;

    } elsif ($qtype eq "TYPE38") {
        $rcode = "NOTIMPL"; 
        #goto end;

    } elsif ($qtype eq "CNAME") {
        $rcode = "NOERROR";
        #goto end;

    } elsif ($qtype eq "PTR") {
        ($self->{ttl}, my $rdata) = (0, $opts{ptrname});
        push @ans, Net::DNS::RR->new("$qname $self->{ttl} $qclass $qtype $rdata");
        $rcode = "NOERROR";

    } elsif ($function eq $servname) {
        handle_dns_tunneling($self);
        $rcode = $self->{rcode};
        #print "rcode $rcode self{rcode} $self->{rcode}\n";

    } elsif ($qtype eq "TXT") {
        $val = localtime();
        chomp $val;
        $val = "Hi:  $val";
        my ($ttl, $rdata) = (0, $val);
        push @ans, Net::DNS::RR->new("$qname $ttl $qclass $qtype \"$rdata\"");
        $rcode = "NOERROR";
        #goto end;

    } elsif ($qtype eq "NS") {
        if ($function ne "ns") {
            my ($ttl, $rdata) = (3600, "ns.$opts{localname}");
            push @ans, Net::DNS::RR->new("$qname $ttl $qclass $qtype $rdata");
            push @add, Net::DNS::RR->new("$rdata $ttl $qclass $qtype $opts{ip}");
        }
        $rcode = "NOERROR";
        #goto end;

    } elsif ($qtype eq "A") {

        if ( $function eq "glance" ) {
            my $addr = $args[0];
            chomp($addr);
            $addr =~ s/_/\./g;
            $addr =~ s/-/\//g;
            $addr = "http://" . $addr;

            print STDERR "Glancing at \"$addr\"\n";

            my $ua      = LWP::UserAgent->new;
            my $request = HTTP::Request->new(HEAD => $addr);
            my $response= $ua->request($request);
            my $modified_time = $response->last_modified;
            my $expires       = $response->expires;
            my $date          = $response->date;

            my $ttl     = $expires - $date;

            my @array = unpack("C*", pack("V", $modified_time));  # will it work?
            my $nsip = join(".", @array);
            if ($ttl < (60*20)) {
                $ttl = 60*20;
            }
            push @ans, Net::DNS::RR->new("$qname $ttl $qclass $qtype $nsip");
            $rcode = "NOERROR";
            #goto end;

        } else {

            my ($ttl, $rdata) = (3600, $opts{ip});
            push @ans, Net::DNS::RR->new("$qname $ttl $qclass $qtype $rdata");
            $rcode = "NOERROR";
            #goto end;
        }

    }

#end:
    if($opts{verbose}){
        my ($element, $name);
        print "\n";
        foreach $element (@ans, @auth, @add) {
            $name = $element->string;
            chomp $name;
            print $name, "\n";
        }
    }

    # mark the answer as authoritive (by setting the 'aa' flag
    my @response = ($rcode, \@ans, \@auth, \@add, { aa => 1 });
    return @response;
}


# check users
die "You need to be root to run this on port 53\n" if($>);
my $dropuid = getpwnam($opts{user});
die("User $opts{user} does not exist") if(!$dropuid);
my $dropgid = getgrnam($opts{group});
die("Group $opts{group} does not exist") if(!$dropgid);

# open socket
my $ns = Net::DNS::Nameserver->new(
    LocalAddr    => $opts{listen},
    LocalPort    => 53,
    ReplyHandler => \&reply_handler,
    Verbose      => $opts{verbose},
) || die "couldn't create nameserver object\n";

# drop privileges
print "Dropping privileges to UID=$dropuid GID=$dropgid\n" if($opts{verbose});
( $(, $) ) = ("$dropgid $dropgid","$dropgid $dropgid");
( $<, $> ) = ($dropuid, $dropuid);
( $<, $> ) = ($dropuid, $dropuid);

my $pidfile;
if ( exists $opts{pidfile} and length $opts{pidfile} ) {
    open($pidfile, ">$opts{pidfile}") || die "Error: could not write to pidfile: $!\n";
}

my $pid = $$;
if ( $opts{daemon} ) {
    close(STDIN);
    close(STDOUT);
    close(STDERR);
    setsid();
    fork && exit;
    $pid = $$;
}

if ( exists $opts{pidfile} and length $opts{pidfile} ) {
    print $pidfile "$pid\n";
    close($pidfile);
}

## run
$ns->main_loop;

print STDERR "SHIT: MAIN LOOP ENDED\n";

exit(0);


#######################################################################
#######################################################################

sub can_send {
    my $s = shift || return;
    my $fh = fileno($s);
    my ($win, $wout, $ein, $eout);
    vec($win,$fh,1)=1;
    vec($ein,$fh,1)=1;
    select(undef,$wout=$win,$eout=$ein,0);
    if ( vec($eout,$fh,1) == 1 ) {
        print STDERR "INFO: can_send() exception found\n" if $ENV{VERBOSE};
    }
    return vec($wout,$fh,1);
}

sub can_recv {
    my $s = shift || return;
    my $fh = fileno($s);
    my ($rin, $rout, $ein, $eout);
    vec($rin,$fh,1)=1;
    vec($ein,$fh,1)=1;
    select($rout=$rin,undef,$eout=$ein,0);
    if ( vec($eout,$fh,1) == 1 ) {
        print STDERR "INFO: can_send() exception found\n" if $ENV{VERBOSE};
    }
    return vec($rout,$fh,1);
}


#######################################################################
#######################################################################

package Queue;

sub new {
    my $self = shift;
    my %h = @_;
    $h{'_queue_'} = [];
    return bless \%h, $self;
}

sub pending {
    return scalar @{ $_[0]->{'_queue_'} };
}

sub enqueue {
    my $self = shift;
    push @{ $self->{'_queue_'} }, @_;
}

sub dequeue {
    my $self = shift;
    my $len = shift || 1;
    return splice( @{ $self->{'_queue_'} }, 0, $len );
}

