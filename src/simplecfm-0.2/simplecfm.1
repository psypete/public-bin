.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SIMPLECFM 1"
.TH SIMPLECFM 1 "2012-04-09" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
simplecfm \- Simple Configuration Management
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
simplecfm [\fIoptions\fR] \fIscfm-file\fR [..]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBsimplecfm\fR is a tool for configuring a system and its software using a simplified
configuration language and limited set of functionality. The goal is to provide a 
lightweight alternative to other configuration management software which may have
a higher learning curve or take more time to set up.
.PP
\&\fIscfm-file\fR is a file formatted using simplecfm's configuration language. By default
simplecfm will change to the directory of this file before execution, so all
operations in the configuration file are local to this directory.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-i\fR \fIseconds\fR, \fB\-\-interval\fR=\fIseconds\fR" 4
.IX Item "-i seconds, --interval=seconds"
Tells simplecfm to loop indefinitely over each \fIscfm-file\fR after \fIseconds\fR
has elapsed. If the directory containing \fIscfm-file\fR is revision-controlled you
can run something like \f(CW\*(C`svn update\*(C'\fR before any operations to pull the
most recent configuration, then have a second \fIscfm-file\fR do the rest of
the changes.
.IP "\fB\-p\fR \fIpidfile\fR, \fB\-\-pid\fR=\fIpidfile\fR" 4
.IX Item "-p pidfile, --pid=pidfile"
Sets the pid file to use. By default only one instance of simplecfm is allowed to
run at a time, but specifying a new pid file will override that.
.IP "\fB\-s\fR \fIuser\fR, \fB\-\-su\fR=\fIuser\fR" 4
.IX Item "-s user, --su=user"
Forks a new process, exits the parent, changes the user/group to that of \fIuser\fR
and continues as normal.
.IP "\fB\-\-no\-cd\fR" 4
.IX Item "--no-cd"
Don't change to the directory of \fIscfm-file\fR before interpreting it.
.IP "\fB\-\-dry\-run\fR" 4
.IX Item "--dry-run"
Does not perform any actions but does a syntax check on \fIscfm-file\fR. This will
execute any commands in backticks in order to fully evaluate the syntax.
.IP "\fB\-v\fR, \fB\-\-verbose\fR" 4
.IX Item "-v, --verbose"
Print out more verbose output.
.IP "\fB\-h\fR, \fB\-\-help\fR" 4
.IX Item "-h, --help"
Print out usage information.
.SH "SCFM CONFIGURATION FILE FORMAT"
.IX Header "SCFM CONFIGURATION FILE FORMAT"
The configuration file format is designed to be simple, functional and resemble
natural language. Each line can contain one expression. There is no special
punctuation except for variables. Whitespace does not matter (screw you, python).
Comments can be included using a hash symbol (\fI#\fR) at the beginning of a line.
.SS "Variables"
.IX Subsection "Variables"
Variables are supported throughout the configuration file. You can use a variable
by wrapping its name in a ${} block, such as \fI${\s-1VAR\s0}\fR. You set the variable by
simply putting the name, an equals sign (\fI=\fR), and what you want it to be set to
on a single line.
.PP
The suggested convention is to use only capital letters for variables. All environment
variables from your shell environment are converted to variables at run time.
.PP
Example:
.PP
.Vb 4
\&    MYVAR=here is a variable
\&    MYVAR2="here is another one"
\&    MYVAR3="the old variable was ${MYVAR}"
\&    run echo "stuff here: ${MYVAR3}"
.Ve
.PP
Before any line is interpreted, all variable blocks on the line are replaced with
their values.
.SS "Backticks"
.IX Subsection "Backticks"
Since the configuration language is limited, it helps to be able to call a one-line
shell script or external program to provide extra functionality. Anything enclosed 
between two backtick (\fI`\fR) characters is executed and the output is inserted into the
line.
.PP
Example:
.PP
.Vb 3
\&     if \`echo $HOSTNAME | grep \-qe "\e.la\e.domain\e.com$" && echo 1\` is "1"
\&       include domains/la.domain.com/main.scfm
\&     done
\&
\&     FREEMEM=\`free \-m | grep Mem: | awk \*(Aq{print $4}\*(Aq\`
\&
\&     INTF_ETH0=\`ifconfig eth0 | grep addr: | cut \-d : \-f 2\- | awk \*(Aq{print $1}\*(Aq | grep \-e "[0\-9]\e+\e.[0\-9]\e+\e.[0\-9]\e+\e.[0\-9]\e+"\`
.Ve
.SS "Conditionals"
.IX Subsection "Conditionals"
Each conditional statement begins on its own line and ends on a line with only
the word 'done' (whitespace does not matter).
.PP
\fIif\fR
.IX Subsection "if"
.PP
The 'if' statement tests if one expression is, or isn't, the same as a second
expression. The expressions can be literals, variables or backticks.
.PP
Syntax:
.PP
.Vb 3
\&    if EXPR is|isnt EXPR
\&        ...
\&    done
.Ve
.PP
\fIforeach\fR
.IX Subsection "foreach"
.PP
The 'foreach' statement will loop over a series of configuration lines, each
time replacing a variable with an entry from a list, until it is done with the
list. Each iteration of the loop is over once it reaches a line with only the word
\&'done' on it.
.PP
A list is just a space-separated expression such as \*(L"one two three four\*(R", which
can be a literal, a variable or backticks as before.
.PP
Syntax:
.PP
.Vb 3
\&    foreach NAME in EXPR
\&      ...
\&    done
.Ve
.SS "Command expressions"
.IX Subsection "Command expressions"
Each line that isn't a variable being set or a conditional is a command expression.
These are similar to a standard unix command in that they have a command name,
options and arguments.
.IP "\fBcopy\fR \fI[options]\fR \fIfile\fR [..]" 4
.IX Item "copy [options] file [..]"
.Vb 8
\& \-t,\-\-to DEST          \- The destination of the file to copy
\& \-m,\-\-mode MODE        \- The mode of files to copy
\& \-l,\-\-local            \- Only operates locally. The default is to
\&                         use rsync to copy files either locally or remotely.
\&    \-\-no\-backup        \- Does not backup destination files. By default
\&                         makes a backup of existing files.
\&    \-\-no\-recurse       \- Does not copy recursively. By default all
\&                         files are copied recursively.
.Ve
.Sp
By default we use rsync for copying files, to support both local and remote file
copying using ssh and to speed up even local copies when the files aren't greatly
different. Using \-\-local will force using 'cp'.
.Sp
Note: the \-\-mode here is passed to rsync via its '\-\-chmod' parameter, which only
seems to take non-octal permission modes. See \fIrsync\fR\|(1) and \fIchmod\fR\|(1) man pages for
details.
.Sp
Also note: the mode you set here is set on \s-1ALL\s0 destination files, including
directories (unless you specify otherwise using rsync's non-standard formatting
to differentiate between files and directoies). If you use '\-\-mode 0600' and a
directory is copied, \fIyou won't be able to read that directory\fR because all
directories need executable permissions to be able to read their contents!
.Sp
If the mode specified was octal, we run chmod separately to attempt to set the mode
manually. This obviously increases the risk of a security race condition in between
copying the file and running chmod. To ensure the file is copied safely, set the
permission before you copy using the 'permissions' command.
.Sp
.Vb 3
\& Example:
\&     copy \-\-mode u=rw,g=,o= \-\-to /etc/httpd/httpd.conf files/httpd.conf.example
\&     copy \-\-mode 0600 \-\-to /etc/httpd/httpd.conf files/httpd.conf.example
.Ve
.IP "\fBmakedir\fR \fI[options]\fR \fIdirectory\fR [..]" 4
.IX Item "makedir [options] directory [..]"
.Vb 3
\& \-m,\-\-mode MODE        \- The mode of the directory
\&    \-\-no\-parents       \- Does not create parent directories. Default is
\&                         to create any parent directories that don\*(Aqt exist.
\& 
\& Example:
\&     makedir \-\-mode 0750 /srv/httpd/cgi\-bin
.Ve
.IP "\fBdelete\fR \fI[options]\fR \fIfile\fR [..]" 4
.IX Item "delete [options] file [..]"
.Vb 2
\&    \-\-no\-recurse       \- Does not delete recursively. By default all files
\&                         are deleted recursively.
.Ve
.IP "\fBmove\fR \fI[options]\fR \fIfile\fR [..]" 4
.IX Item "move [options] file [..]"
.Vb 1
\& \-t,\-\-to DEST          \- The destination of the files to move
.Ve
.IP "\fBappend\fR \fI[options]\fR \fIargument\fR [..]" 4
.IX Item "append [options] argument [..]"
.Vb 4
\& \-t,\-\-to FILE          \- The file to append to
\& \-f,\-\-files            \- Specifies that arguments are files to be appended
\&                         to FILE. By default arguments are literal strings
\&                         appended to the file.
.Ve
.IP "\fBrun\fR \fI[options]\fR executable [arguments ..]" 4
.IX Item "run [options] executable [arguments ..]"
.Vb 4
\& \-e,\-\-error            \- Force simplecfm to exit with an error if the executable
\&                         returns a non\-zero status.
\& \-i,\-\-import           \- Reads the output of the program and imports any
\&                         KEY=VALUE pairs as variables.
.Ve
.Sp
It should be noted that this command's arguments are passed as-is to the
shell for execution (after variables are replaced), so a double-quote will
be sent as-is, as well as backslashes, etc.
.IP "\fBpermissions\fR \fI[options]\fR \fIperms\fR \fIfile\fR [..]" 4
.IX Item "permissions [options] perms file [..]"
.Vb 3
\&    perms              \- Standard mode or octal permission passed to chmod(1)
\& \-r,\-\-recurse          \- Applies permissions to files recursively. Default
\&                         is to not apply recursively.
.Ve
.IP "\fBownership\fR \fI[options]\fR \fI[owner][:[group]]\fR \fIfile\fR [..]" 4
.IX Item "ownership [options] [owner][:[group]] file [..]"
.Vb 3
\&    [owner][:[group]]  \- Same owner/group argument given to chown(1)
\& \-r,\-\-recurse          \- Applies ownership to files recursively. Default
\&                         is to not apply recursively.
.Ve
.IP "\fBinclude\fR \fIfile\fR" 4
.IX Item "include file"
Interprets an scfm-format \fIfile\fR. Changes to the directory of the \fIfile\fR unless
\&\-\-no\-cd was passed on the command line. Variables are shared, unlike specifying
multiple files on the command line which does not share variables.
.IP "\fBsu\fR \fIuser\fR" 4
.IX Item "su user"
Forks a new process, changes to user \fIuser\fR and continues interpreting the
\&\fIscfm-file\fR until it is done. Then simplecfm continues with the next \fIscfm-file\fR.
Keep in mind that this does nothing to secure the continued operation of
simplecfm; an attacker may find a way to exploit your system if they are allowed
to execute commands even as an unpriviledged user.
.Sp
Note that all this does is change the current user and group. All variables such
as '${\s-1USER\s0}', '${\s-1HOME\s0}', etc remain as they were. If you want to really emulate
running simplecfm as a different user, use your system's \*(L"sudo\*(R" or \*(L"su\*(R" command.
.SH "NOTES"
.IX Header "NOTES"
\&\- Backticks are still executed even if you used the '\-\-dry\-run' option! This is
  because often backticks are used for tests which need to be run before the
  configuration is fully known. Don't put anything in backticks that you don't
  want run in a syntax check, basically.
.PP
\&\- Most of simplecfm's commands are implemented by running an external program.
  If you want to pass extra options for those programs you can specify them
  before your other arguments. For example, if you wanted to prevent from
  copying any revision-control files to a destination directory, just use the
  '\-C' option to rsync like this:
.PP
.Vb 1
\&    copy \-\-mode u=rwx \-\-to some\-destination/ \-C file1.txt dir1/
\&
\&  Here the \*(Aq\-C\*(Aq is passed to rsync and interpreted by it as a command\-line
\&  option, even though to simplecfm it might as well be a file. The same can
\&  be used for other commands such as \*(Aqmakedir\*(Aq, \*(Aqownership\*(Aq, etc.
.Ve
.PP
\&\- Since Getopt::Long is used to parse the options for the commands, it may
  sometimes interpret an argument you're giving as an option. To make sure the
  command knows you're done passing options, use '\-\-'. 
  Example:
.PP
.Vb 1
\&    copy \-\-to /some/path/ \-\- some_arguments here.txt \-\-local
\&
\&  In this example the files that are copied into /some/path/ are "some_arguments",
\&  "here.txt", and "\-\-local". The only exception to this is the \*(Aqrun\*(Aq command,
\&  which passes everything after its options exactly as it\*(Aqs found on the line.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Peter Willis <peterwwillis@yahoo.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2012 Peter Willis <peterwwillis@yahoo.com>
