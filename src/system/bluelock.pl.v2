#!/usr/bin/perl
# bluelock.pl v0.2 - lock a screen once a bluetooth device's RSSI increases
# Copyright (C) 2008 Peter Willis <peterwwillis@yahoo.com>
#
# Changes since v0.1:
#  - Ensure only 1 instance running at a time (improves cron use)
#
# Edit the values below depending on your bluetooth settings and locker tool.
# I have mine set to lock 15 seconds after the RSSI is greater than 1; of course
# the RSSI fluctuates above this quite commonly but it usually hits 1 or 0
# within 15 seconds and resets the timer. Expand these values to fit your needs.
#
# Also, since hcitool needs to be root to initiate a connection you'll probably
# want to set this up as a cronjob run as root every minute. You can change the
# locker to su to a user to lock a display as mine does (DISPLAY default set
# below as well).
#

use strict;
$|=1;

if ( !exists $ARGV[0] ) {
    die "Usage: $0 BDADDR\n";
}

# Useful if the locker is for a display running on :0
if ( !exists $ENV{DISPLAY} ) {
	$ENV{DISPLAY} = ":0";
}
my $VERBOSE = exists $ENV{VERBOSE} ? $ENV{VERBOSE} : 0;
my $EXPIRE = 15; # time in seconds before locking
my $THRESH = 1; # when the RSSI is above this, start the expire timer
my $LOCKER = "su pwillis -c /usr/bin/xlock";
my $HCITOOL = "/usr/bin/hcitool";
my $BADDR = $ARGV[0];
my $TIMER = time();
my $COUNTDOWN = 0;

# Check if another instance of bluelock is already running
if ( open(LOCK,"<$ENV{HOME}/.bluelock") ) {
	my $pid = <LOCK>;
	chomp $pid;
	if ( kill(0,$pid) ) {
		print "BLUELOCK ALREADY RUNNING ($pid); EXITING\n";
		exit(1);
	}
	close(LOCK);
}

# Set our PID as the currently-running bluelock
if ( open(LOCK,">$ENV{HOME}/.bluelock") ) {
	print LOCK "$$\n";
	close(LOCK);
}


for ( ;; ) {
    my $tmptime = time();
    print "tmptime - TIMER = " . ($tmptime - $TIMER) . "\n" if $VERBOSE;
    if ( ($tmptime - $TIMER) > $EXPIRE ) {
        print "LOCKING\n" if $VERBOSE;
        system($LOCKER);
        sleep 30; # just to give the user time to unlock the screen if this was an accident
        $TIMER = time();
    }
    system("$HCITOOL cc $BADDR 2>/dev/null");
    for ( my $i = 0; $i < 4; $i++ ) {
        my ($FH);
        my $RSSI = 9999;
        open($FH, "$HCITOOL rssi $BADDR 2>/dev/null |");
        while ( <$FH> ) {
            if ( /^RSSI return value: -?([\d]+)/ ) {
                $RSSI = $1;
            }
        }
        # When RSSI goes over THRESH, TIMER stops being set, and it will
        # eventually be $EXPIRE below the current time.
        if ( $RSSI <= $THRESH ) {
            $TIMER = time();
            print "RSSI $RSSI <= THRESH $THRESH\n" if $VERBOSE;
        }
        select undef, undef, undef, 0.50;
    }
}

