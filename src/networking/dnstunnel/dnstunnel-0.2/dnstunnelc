#!/usr/bin/perl

$|=1;
use strict;

my $VERSION="2011-03-13";

use Fcntl;
use Net::DNS;
use MIME::Base64;
use MIME::Base32 qw ( RFC );
use Time::HiRes qw (usleep gettimeofday);
use Getopt::Long;
use threads;
use Thread::Queue;
#use warnings;
use IO::Socket;

# hardcoded destinations
my %opts;
$opts{verbose}     = 0;
$opts{mode}        = 'failover';
$opts{min_sleep}   = 100;
$opts{persistence} = 5;

#my $min_sleep = $sleep = 100;
#my $mode = "failover";

my $extension;
undef $extension;

#undef $file;
#undef $resolver;

my $outfile = *STDOUT;
my $infile = *STDIN;

GetOptions(
    "file=s"         => \$opts{file},
    "resolver=s"     => \$opts{resolver},
    "upresolver=s"   => \$opts{upresolver},
    "downresolver=s" => \$opts{downresolver},
    "minsleep=i"     => \$opts{min_sleep},
    "verbose"        => \$opts{verbose},
    "persistence"    => \$opts{persistence},
    "cyclemode=s"    => \$opts{mode},
    "trymore"      => \$opts{trymore}
);

$extension = $ARGV[0];
if(!$extension){
    print STDERR <<"EOD";
dnstunnelc $VERSION - DNS tunnel transport client
written by Dan Kaminsky <dan\@doxpara.com>
modified by Andreas Gohr <andi\@splitbrain.org>
         and Peter Willis <peterwwillis\@yahoo.com>

Usage:  dnstunnelc <OPTIONS> sshdns.server.example.com
Options:
    -r [nameservers]    comma separated nameservers to lookup against
    -m [minsleep]       Specify minimum sleep delay between probes
    -c [mode]           DNS server selection mode (see below)
    -p [rounds]         Number of requests before changing server (5)
    -f [file]           (Possibly large) list of DNS servers
    -u [nameservers]    Upstream DNS servers (experimental)
    -d [nameservers]    Downstream DNS servers (experimental)
    -t                  Try to send more data
Modes:
    failover            Move to next server only when one fails (default)
    circle              Move to next server with each packet group
    random              Move to random server with each packet group
Example:
    ssh -C -o ProxyCommand="./dnstunnelc sshdns.server.example.com" localhost
EOD
    exit 1;
}

my $sleep = $opts{min_sleep};

select STDERR;
$|=1;
select STDOUT;

# set STDIN to nonblock and remove \n handling
my $flags='';
fcntl($infile, F_GETFL, $flags) or die "1\n";
$flags |= O_NONBLOCK;
fcntl($infile, F_SETFL, $flags) or die "2\n";
binmode $infile;
binmode $outfile;

# globals
my @downlist;
my @uplist;
#my $res_down = Net::DNS::Resolver->new;
my $res_down = MyDNS::Resolver->new;
$res_down->retry(0);
$res_down->retrans(1);;
$res_down->igntc(1);;
#$res_down->udppacketsize(1024);

#my $res_up = Net::DNS::Resolver->new;
my $res_up = MyDNS::Resolver->new;
$res_up->retry(0);
$res_up->retrans(1);
$res_up->igntc(1);
#$res_up->udppacketsize(1024);

#$res_up = $res_down;

# two way resolvers
if ($opts{resolver} || $opts{file}) {
    my @dnslist;
    if ($opts{resolver}) {
        @dnslist = split(",",$opts{resolver});
    } else {
        open(FILE, $opts{file}) || die("could not open $opts{file}");
        @dnslist = <FILE>;
        close FILE;
    }
    chomp (@dnslist);
    if (scalar (@dnslist)) {
        @downlist = @dnslist;
        @uplist = reverse (@dnslist);
    }
}

# one way resolvers
if ($opts{downresolver}) {
    @downlist = split(',',$opts{downresolver});
}
if ($opts{upresolver}) {
    @uplist = split(',',$opts{upresolver});
}

# system resolvers
if(!scalar(@downlist)){
    @downlist = $res_down->nameservers;
}
if(!scalar(@uplist)){
    @uplist = $res_up->nameservers;
}

# init resolvers
$res_down->nameserver(@downlist);
$res_up->nameserver(@uplist);

if($opts{verbose}) {
    print STDERR
    "Resolving through:\n",
    "Up:   ", join(", ", $res_up->nameserver),"\n",
    "Down: ", join(", ", $res_down->nameserver), "\n";
}



# hardcoded session ID -- should be B32'd and increased
my $id = int rand(65536);
my $sum = 0;

my $sum_up=0;
my $size_up=0;

my $data_up;

my $do_send_up = 0;
my $max_sleep = 4000;
my $then = 0;


my $payload;

my $upstate = "NEED_DATA";
my $up_sock;
my $up_sent_time;
my $down_sent_time;

my $down_sock;
my $downstate = "NEED_DATA";

my (@txt, $data);
my $hop_up=int rand($#uplist);
my $hop_down=int rand($#downlist);;
my $val=0;
my $throws_up = my $throws_down = 0;

my $pipe_read_max = 110;
#my $pipe_read_max = 220;

if ( $opts{trymore} ) {
    $pipe_read_max = 220;
}


my $read_queue  = Thread::Queue->new;
my $read_thread = threads->new(\&reader);
sub reader {
    while (1) {
        if ($read_queue->pending < 32) {
            my $data="";
            #my $error=sysread(STDIN, $data, 110);
            my $error = sysread($infile, $data, $pipe_read_max);
            #print STDERR "Read error $error (data len ".length($data).")\n";
            if (length($data)) {
                $read_queue->enqueue($data);
            }
            if (undef $error) {
                exit(1);
            }
        }
        usleep(50 * 1000);
    }
}

sub pick_nameserver {
    if ($opts{mode} eq "circle") {
        if (!$throws_up)  {
            $throws_up = $opts{persistence};
            $hop_up++;
            $res_up->nameserver($uplist[$hop_up % ($#uplist+1)]);
        }
        if (!$throws_down) {
            $throws_down = $opts{persistence};
            $hop_down++;
            $res_down->nameserver($downlist[$hop_down % ($#downlist+1)]);
        }
    } elsif ($opts{mode} eq "random") {
        if (!$throws_up) {
            $throws_up = $opts{persistence};
            $res_up->nameserver($uplist[rand(($#uplist+1))]);
        }
        if (!$throws_down) {
            $throws_down = $opts{persistence};
            $res_down->nameserver($downlist[rand(($#downlist+1))]);
        }
    } else {
        $res_up->nameserver($uplist[$hop_up % ($#uplist+1)]);
        $res_down->nameserver($downlist[$hop_down % ($#downlist+1)]);
    }
}


while (1) {
    

    my $self;
    # per packet nonce to evade min-ttl's
    my $nonce = int rand(65536);

    pick_nameserver();

    if ($downstate eq "NEED_DATA") {
        undef $down_sock;
        $down_sock = $res_down->bgsend("$sum-$nonce.id-$id.down.$extension", "TXT");
        #down_sock = my_bgsend($res_down, "$sum-$nonce.id-$id.down.$extension", "TXT");
        $down_sent_time = gettimeofday();
        if (defined $down_sock) {
            $downstate = "WAIT_FOR_REPLY";
        }
    }

    if ($downstate eq "WAIT_FOR_REPLY") {
        if ($res_down->bgisready($down_sock)) {
        #if (my_bgisready($down_sock)) {
            $downstate = "GOT_REPLY";
        }
        if (gettimeofday() - $down_sent_time > 2) {
            undef $down_sock;
            $throws_down=0;
            if ($opts{mode} eq "failover") {
                $hop_up++; $hop_down++;
            }
            $downstate = "NEED_DATA";
        }
    }

    if ($downstate eq "GOT_REPLY") {
        $throws_down--;
        my $reply = $res_down->bgread($down_sock);
        undef $down_sock;
        $data="";
        $val=0;
        if ($reply) {
            foreach my $rr (grep { $_->type eq 'TXT' } $reply->answer) {
                # note -- TXT records support multiple text regions.  These are not reordered.
                @txt = $rr->char_str_list();
                foreach my $textdata (@txt) {
                    $data = $data . decode_base64($textdata);
                }
            }
            if (length($data)) {
                $sleep = $opts{min_sleep};
                $downstate = "WRITE_TO_STDOUT";
            } else {
                $sleep*=3;
                if ($sleep > $max_sleep) {
                    $sleep = $max_sleep;
                }
                $downstate = "CHECK_TIME";
            }
        }
    }

    if ($downstate eq "WRITE_TO_STDOUT") {
        my $outdata = substr($data, $val);
        #print STDERR "Writing data (len ".length($outdata)."), length ".(length($data)-$val).", to stdout\n";
        eval { $val += syswrite($outfile, $outdata, length($data)-$val); };
        if ($val == length($data)) {
            $sum+=$val;
            $downstate = "CHECK_TIME";
        }
    }

    if ($downstate eq "CHECK_TIME") {
        my $diff = gettimeofday() - $down_sent_time;
        if ($diff*1000 > $sleep) {
            $downstate = "NEED_DATA";
        }
    }

#up:
    if ($upstate eq "NEED_DATA") {
        if($read_queue->pending){
            $upstate = "GOT_DATA";
        }
    }

    if ($upstate eq "GOT_DATA") {
        my $temp_payload;
        my $data = $read_queue->dequeue_nb;
        if (defined $data) {
            $temp_payload = lc MIME::Base32::encode($data);
            $temp_payload =~s/(.{60})/$1\./g;
            $temp_payload =~s/\.\././g;
            $payload = "$temp_payload.$nonce-$sum_up.id-$id.up.$extension";
            $upstate = "SEND_DATA";
        }
    }

    if ($upstate eq "SEND_DATA") {
        undef $up_sock;
        $up_sock = $res_up->bgsend($payload, "A");
        #$up_sock = my_bgsend($res_up, $payload, "A");
        $up_sent_time = gettimeofday();
        if (defined $up_sock) {
            $upstate = "WAIT_FOR_REPLY";
        }
    }

    if ($upstate eq "WAIT_FOR_REPLY") {
        if ($res_up->bgisready($up_sock)) {
        #if (my_bgisready($up_sock)) {
            $upstate = "GOT_REPLY";
        }
        if(gettimeofday() - $up_sent_time > 4.0){
            undef $up_sock;
            $throws_up=0;
            if ($opts{mode} eq "failover") {
                $hop_up++;
            }
            $upstate = "SEND_DATA";
        }
    }

    if ($upstate eq "GOT_REPLY") {
        $throws_up--;
        my $reply_up = $res_up->bgread($up_sock);
        undef $up_sock;
        if ( $reply_up && ($reply_up->header->ancount > 0) ) {
            $upstate = "NEED_DATA";
            $sleep = $opts{min_sleep};
        } else {
            $upstate = "SEND_DATA";
        }
    }

    usleep($opts{min_sleep} * 1000 / 10);
}


package MyDNS::Resolver;

use Net::DNS::Resolver;
use IO::Select;

use base qw(Net::DNS::Resolver);

# heh.... bg_isready never blocks, so we end up sucking up tons of cpu just re-polling it.
# this will drop your cpu use from 50% to 2% with identical throughput
sub bgisready {
    my $self = shift;
    my $sel = IO::Select->new(@_);
    my @ready = $sel->can_read(2.0);
    #my @ready = $sel->can_read(0.0);
    return @ready > 0;
}

