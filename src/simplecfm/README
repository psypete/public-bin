
                   Simple Configuration Management v0.1
                        <peterwwillis@yahoo.com>


                               ABOUT

This tool is designed for lightweight configuration management when you
don't want to implement a more robust tool like puppet or cfengine. We trade
off functionality for simplicity and aim to only provide the bare essential
functionality needed to configure a host or its software.


                               USAGE

To use the tool, first configure a .scfm file according to
documentaiton.txt. Check the examples/ directory for more ideas. Then simply
run the tool with the path to the .scfm file.

All operations are done from the path you started simplecfm from, so every
copy, run, etc will happen in the directory of the .scfm file. Keep that in
mind when writing and running your .scfm files.

To get more verbose information, use '-v'. To test the configuration and not
actually perform any operations, use '--dry-run'.

Read the man page using 'man ./simplecfm.1' or 'pod2man simplecfm | nroff
-man | less'.


                               NOTES

- Backticks are still executed even if you specified --dry-run ! This is
  because often backticks are used for tests which need to be run before the
  configuration is fully known. Don't put anything in backticks that you don't
  want run in a syntax check, basically.

- Most of simplecfm's commands are implemented by running an external program.
  If you want to pass extra options for those programs you can specify them
  before your other arguments. For example, if you wanted to prevent from
  copying any revision-control files to a destination directory, just use the
  '-C' option to rsync like this:

    copy --mode u=rwx --to some-destination/ -C file1.txt dir1/

  Here the '-C' is passed to rsync and interpreted by it as a command-line
  option, even though to simplecfm it might as well be a file. The same can
  be used for other commands such as 'makedir', 'ownership', etc.

- Since Getopt::Long is used to parse the options for the commands, it may
  sometimes interpret an argument you're giving as an option. To make sure the
  command knows you're doing passing arguments, use '--'. 
  Example:

    copy --to /some/path/ -- some_arguments here.txt --local

  In this example the files that are copied into /some/path/ are "some_arguments",
  "here.txt", and "--local". The only exception to this is the 'run' command,
  which passes everything after its options exactly as it's found on the line.

